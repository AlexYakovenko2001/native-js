const names = ['Nil', 'Anton', 'Sergio', 'Bob']

console.log(names.sort()) //отсортирует имена в алфавитном порядке

//1. Метод sort работает мутабельно
//2. Возвращает ссылку на исходный массив
//3. Работает со строками без дополнительных параметров
//4. Сортирует в порядке символов Unicode

const numbers = [101, 100, 2, 1000, 1, -1, 0]
console.log(numbers.sort())
//Output: [-1, 0, 1, 100, 1000, 101, 2]

//Приводит числа(и вообще любые данные в массиве приводит к строке, даже null, undefined и др.) к строке и сравнивает их по тому, где находится первый символ каждой строки в таблице Unicode.


const compareFunc = (a, b) => {// для сортировки по возрастанию
    if (a < b) {
        return -1
    } else {
        return 1
    }
}
//или можно записать проще: const compareFunc = (a, b) => a - b

//Берёт каждые два елемента массива и сравнивает их. Если нам нужно отсортировать по возрастанию, то первый элемент массива должен быть меньше, чем второй. Вот такое сравнение проводится в функции. Если елементы не нуждаются в перестановке, то ретурним любое отрицательное число (это даёт сорту понять, что перестановка не нужна), если перестановка нужна, то ретурним любое положительное число

console.log(numbers.sort(compareFunc))
//Output [-1, 0, 1, 2, 100, 101, 1000]

//Если нужно отсортировать числа в порядке убывания, то есть два пути как это можно сделать:
// 1. Написать новую функцию: const compareFunc = (a, b) => b - а
// 2. Использовать ту же функцию, что и для сортировки по возрастанию, а после вызвать reverse()

console.log(numbers.sort(compareFunc).reverse())
//Output: [1000, 101, 100, 2, 1, 0, -1]

const students = [
    {
        name: "Bob",
        age: 22,
        isMarried: true,
        scores: 85,
    },
    {
        name: "Alex",
        age: 21,
        isMarried: true,
        scores: 89
    },
    {
        name: "Nick",
        age: 20,
        isMarried: false,
        scores: 120
    },
    {
        name: "John",
        age: 19,
        isMarried: false,
        scores: 100
    }
];
console.log(students.sort((a,b) => a.scores - b.scores))
//Сортируем элементы массива students по позрастанию баллов.

console.log(students.sort((a, b) => (a.name.localeCompare(b.name))))
//Сортируем элементы массива students по именам в алфавитном порядке. Метод строки localCompare сравнивает строку, для которой его вызвали, и строку, которую передают в него в качестве аргумента. Если первая строка стоит до той, которая в аргументе localСompare, то возвращается отрицательное число, если после, то положительное, если они эквивалентны, то ноль.



//bubble sort - сортировка пузырьком
const nums = [24, 12, 1, 344, 34, 57, 33, 88]

for (let j = 0; j < nums.length - 1; j++) {
    let isSorted = true;
    for (let i = 0; i < nums.length - 1 - j; i++) { //чтобы каждый раз не доходить до самого конца цикла
        if (nums[i] > nums[i + 1]) { //по возрастанию
            isSorted = false;
            [nums[i + 1], nums[i]] = [nums[i], nums[i + 1]]
        }
        if (isSorted) break //если массив будет отсортирован(т.е. isSorted останется равным true, то цикл остановится)
    }
}

//Сортировка пузырьком - крайне неэффективный метод с точки зрения скорости, сложность алгоритма вычисления растёт быстрее, чем сложность самого массива. Количество итераций равняется квадрату длины массива, а чем больше итераций, тем больше время обработки массива.
console.log(nums)